{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","id","letter","src","handleDisplay","audio","React","createRef","useEffect","document","addEventListener","handleKeydown","removeEventListener","e","keyCode","charCodeAt","current","play","currentTime","className","onClick","ref","sounds","App","useState","display","setDisplay","soundTriggered","setSoundTriggered","map","sound","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKA8CeA,G,KA3CC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,cAE9BC,EAAQC,IAAMC,YAGlBC,qBAAU,WAIR,OAHAC,SAASC,iBAAiB,UAAWC,GAG9B,kBAAMF,SAASG,oBAAoB,UAAWD,OAGvD,IAMMA,EAAgB,SAAAE,GAChBA,EAAEC,UAAYZ,EAAOa,eACvBV,EAAMW,QAAQC,OACdZ,EAAMW,QAAQE,YAAc,EAC5Bd,EAAcH,KAIlB,OACE,yBACEkB,UAAU,WACVlB,GAAIA,EACJmB,QAlBgB,WAClBf,EAAMW,QAAQC,OACdZ,EAAMW,QAAQE,YAAc,EAC5Bd,EAAcH,KAiBZ,uBAAGkB,UAAU,UAAUjB,GACvB,2BACEmB,IAAKhB,EACLJ,GAAIC,EACJC,IAAKA,OCnCPmB,EAAS,CACb,CACErB,GAAI,QACJC,OAAQ,IACRC,IAAK,qFAEP,CACEF,GAAI,iBACJC,OAAQ,IACRC,IAAK,2DAEP,CACEF,GAAI,YACJC,OAAQ,IACRC,IAAK,yGAEP,CACEF,GAAI,UACJC,OAAQ,IACRC,IAAK,gDAEP,CACEF,GAAI,cACJC,OAAQ,IACRC,IAAK,qFAEP,CACEF,GAAI,YACJC,OAAQ,IACRC,IAAK,qFAEP,CACEF,GAAI,gBACJC,OAAQ,IACRC,IACE,qFAEJ,CACEF,GAAI,OACJC,OAAQ,IACRC,IAAK,qFAEP,CACEF,GAAI,cACJC,OAAQ,IACRC,IAAK,sFAqCMoB,EAjCH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAG4BF,oBAAS,GAHrC,mBAGTG,EAHS,KAGOC,EAHP,KAKVxB,EAAgB,SAAAqB,GACpBG,GAAkB,GAClBF,EAAWD,IAGb,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,WACXQ,EAA8E,KAA7D,uBAAGR,UAAU,cAAb,gCACnB,uBAAGA,UAAU,cAAcM,IAE7B,yBAAKN,UAAU,aACZG,EAAOO,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAM7B,GACXA,GAAI6B,EAAM7B,GACVC,OAAQ4B,EAAM5B,OACdC,IAAK2B,EAAM3B,IACXC,cAAeA,WCjET4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7bf8bae0.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\n// Destructuring used to pass props (see https://www.youtube.com/watch?v=CFUysPqYC4Y)\r\nconst DrumPad = ({ id, letter, src, handleDisplay }) => {\r\n\r\n  let audio = React.createRef();\r\n\r\n  // Effect Hook. Like componentDidMount, componentDidUpdate, and componentWillUnmount lifecycle methods combined. Runs after each render\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleKeydown);\r\n\r\n    // Cleanup (adding and removing is closely related, so a feature of useEffect is that this logic can be kept together. Every effect can optionally return a cleanup function that cleans up after it)\r\n    return () => document.removeEventListener('keydown', handleKeydown);\r\n  });\r\n\r\n  const handleClick = () => {\r\n    audio.current.play();\r\n    audio.current.currentTime = 0;\r\n    handleDisplay(id);\r\n  }\r\n\r\n  const handleKeydown = e => {\r\n    if (e.keyCode === letter.charCodeAt()) {\r\n      audio.current.play();\r\n      audio.current.currentTime = 0;\r\n      handleDisplay(id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"drum-pad\"\r\n      id={id}\r\n      onClick={handleClick}\r\n    >\r\n      <p className=\"letter\">{letter}</p>\r\n      <audio\r\n        ref={audio}\r\n        id={letter}\r\n        src={src}\r\n      >\r\n      </audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrumPad;","import React, { useState } from 'react';\nimport './App.scss';\nimport DrumPad from './DrumPad';\n\nconst sounds = [\n  {\n    id: 'snare',\n    letter: 'Q',\n    src: 'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/a88fd649f51'\n  },\n  {\n    id: 'shotgun reload',\n    letter: 'W',\n    src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav'\n  },\n  {\n    id: 'bass kick',\n    letter: 'E',\n    src: 'http://dight310.byu.edu/media/audio/FreeLoops.com/3/3/Free%20Kick%20Sample%203-888-Free-Loops.com.mp3'\n  },\n  {\n    id: 'tom-tom',\n    letter: 'A',\n    src: 'http://www.denhaku.com/r_box/linn/midtom.wav'\n  },\n  {\n    id: 'pryda snare',\n    letter: 'S',\n    src: 'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/b3e9cabb008'\n  },\n  {\n    id: 'kick drum',\n    letter: 'D',\n    src: 'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/8b233ccfd7a'\n  },\n  {\n    id: 'closed hi-hat',\n    letter: 'Z',\n    src:\n      'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/0e579fff2af'\n  },\n  {\n    id: 'clap',\n    letter: 'X',\n    src: 'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/2c8b0d9d3a2'\n  },\n  {\n    id: 'open hi-hat',\n    letter: 'C',\n    src: 'https://audio.jukehost.co.uk/5635ca67fded31f2b0f3a14e310fb6e15995d2df/6ae4bf4aa52'\n  }\n];\n\nconst App = () => {\n\n  const [display, setDisplay] = useState('');\n  const [soundTriggered, setSoundTriggered] = useState(false);\n\n  const handleDisplay = display => {\n    setSoundTriggered(true);\n    setDisplay(display);\n  }\n\n  return (\n    <div className='App'>\n      <div className='drum-machine'>\n        <div className='display'>\n          {!soundTriggered ? <p className=\"start-text\">Tap a beat to start playing.</p> : null}\n          <p className='sound-name'>{display}</p>\n        </div>\n        <div className='drum-pads'>\n          {sounds.map(sound => (\n            <DrumPad\n              key={sound.id}\n              id={sound.id}\n              letter={sound.letter}\n              src={sound.src}\n              handleDisplay={handleDisplay}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}